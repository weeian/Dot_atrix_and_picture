--lcd1602控制模块,在液晶上显示两行，第一行为"Welcome to QC!",第二行为"LCD DISPLAY"
--从CGROM中取出数据显示
--lcd_e：1-使能有效，0-使能无效
--lcd_rw:1-读操作，0-写操作  lcd_rs:1-输入数据，0-输入指令
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity CGROM is
	port
	(
		clkin,resetin:in std_logic;--时钟，复位信号输入
		lcd_data:inout std_logic_vector(7 downto 0);--lcd数据总线
		lcd_e,lcd_rw,lcd_rs:out std_logic--lcd控制信号
		--
		--clk_1M_tst:out std_logic;
		--delay_cnt_tst:out integer range 0 to 127
	);
end CGROM;

architecture behave of CGROM is
	component gen_div is--分频元件调用声明
	generic(div_param:integer:=2);--默认是4分频
	port
	(
		clk:in std_logic;
		bclk:out std_logic;
		resetb:in std_logic
	);
	end component;
----
type state is (set_Func,set_DispSwitch,set_EntryMd,clr_Disp,set_DDAd1,set_DDAd2,Display1,Display2,over);
type data_array is array(0 to 13) of std_logic_vector(7 downto 0);
constant data1:data_array:=(X"57",X"65",X"6C",X"63",
							X"6F",X"6D",X"65",X"20",
							X"74",X"6F",X"20",X"51",
							X"43",X"21");--"Welcome to QC!"
constant data2:data_array:=(X"4C",X"43",X"44",X"20",
							X"44",X"49",X"53",X"50",
							X"4C",X"41",X"59",X"20",
							X"20",X"20");--"LCD DISPLAY"
signal lcd_state:state:=clr_Disp;--初始为"清屏"状态
signal clk_yj:std_logic;--100k时钟，T=10us
----
begin
--clk_1M_tst<=clk_yj;
---
gen_clk_yj: --分频产生1M脉冲
		gen_div generic map(240)--480分频的,产生100k脉冲
		port map--分频元件例化
		(
			clk=>clkin,
			resetb=>not resetin,
			bclk=>clk_yj
		);
----
Display:
	process(resetin,clk_yj)
	variable delay_cnt:integer range 0 to 127:=0;--延时计数器
	variable char_cnt:integer range 0 to 15:=0;--字符计数器
	begin
	if resetin='0' then--复位
		lcd_state<=clr_Disp;
		delay_cnt:=0;
		char_cnt:=0;
		lcd_e<='0';
	else
		if rising_edge(clk_yj) then
			case lcd_state is
				when clr_Disp=>--刚开始时就需要清屏幕
					delay_cnt:=delay_cnt+1;
					if delay_cnt<=2 then
						lcd_rs<='0';
						lcd_rw<='0';
						lcd_e<='1';
					elsif delay_cnt<=4 then
						lcd_data<=X"01";
					elsif delay_cnt<=6 then
						lcd_e<='0';--下降沿产生
					elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
						delay_cnt:=0;
						lcd_state<=set_Func;
					end if;
				when set_Func=>--功能设置
					delay_cnt:=delay_cnt+1;
					if delay_cnt<=2 then
						lcd_rs<='0';--指令
						lcd_rw<='0';--写
						lcd_e<='1';
					elsif delay_cnt<=4 then
						lcd_data<=X"38";--DL=1,8位，N=1,2行,F=0,5*7字体
					elsif delay_cnt<=6 then
						lcd_e<='0';--下降沿产生
					elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
						delay_cnt:=0;
						lcd_state<=set_EntryMd;
					end if;
				when set_EntryMd=>--设置输入模式
					delay_cnt:=delay_cnt+1;
					if delay_cnt<=2 then
						lcd_rs<='0';
						lcd_rw<='0';
						lcd_e<='1';
					elsif delay_cnt<=4 then
						lcd_data<=X"06";--I/D=1,自增，S=0,显示不移动
					elsif delay_cnt<=6 then
						lcd_e<='0';--下降沿产生
					elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
						delay_cnt:=0;
						lcd_state<=set_DispSwitch;
					end if;
				when set_DispSwitch=>--设置显示开关
					delay_cnt:=delay_cnt+1;
					if delay_cnt<=2 then
						lcd_rs<='0';
						lcd_rw<='0';
						lcd_e<='1';
					elsif delay_cnt<=4 then
						lcd_data<=X"0C";--D=1,显示开，C=0光标关闭,B=0,光标所在字符不闪烁
					elsif delay_cnt<=6 then
						lcd_e<='0';--下降沿产生
					elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
						delay_cnt:=0;
						lcd_state<=set_DDAd1;
					end if;
				when set_DDAd1=>--设置成DDRAM第一行的地址首地址为0x81
					delay_cnt:=delay_cnt+1;
					if delay_cnt<=2 then
						lcd_rs<='0';
						lcd_rw<='0';
						lcd_e<='1';
					elsif delay_cnt<=4 then
						lcd_data<=X"81";
					elsif delay_cnt<=6 then
						lcd_e<='0';--下降沿产生
					elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
						delay_cnt:=0;
						lcd_state<=Display1;
						char_cnt:=0;--清字符计数器
					end if;
				when Display1=>--向第一行DDRAM写数据
					if char_cnt<14 then --显示"Welcome to QC!" 
						delay_cnt:=delay_cnt+1;
						if delay_cnt<=2 then
							lcd_rs<='1';--数据
							lcd_rw<='0';--写
							lcd_e<='1';
						elsif delay_cnt<=4 then
							lcd_data<=data1(char_cnt);
						elsif delay_cnt<=6 then
							lcd_e<='0';--下降沿产生
						elsif delay_cnt>=100 then--等待>40us时间,使数据写入完毕
							delay_cnt:=0;
							lcd_state<=Display1;
							char_cnt:=char_cnt+1;--字符计数器自增
						end if;
					else
						delay_cnt:=0;
						lcd_state<=set_DDAd2;
						char_cnt:=0;
					end if;	
				when set_DDAd2=>--设置DDRAM第二行的地址首地址为0xc2
						delay_cnt:=delay_cnt+1;
						if delay_cnt<=2 then
							lcd_rs<='0';
							lcd_rw<='0';
							lcd_e<='1';
						elsif delay_cnt<=4 then
							lcd_data<=X"C2";
						elsif delay_cnt<=6 then
							lcd_e<='0';--下降沿产生
						elsif delay_cnt>=100 then--等待>40us时间,使指令写入完毕
							delay_cnt:=0;
							lcd_state<=Display2;
							char_cnt:=0;
						end if;
				when Display2=>--向第二行DDRAM写数据
					if char_cnt<11 then --显示"LCD DISPLAY" 
						delay_cnt:=delay_cnt+1;
						if delay_cnt<=2 then
							lcd_rs<='1';--数据
							lcd_rw<='0';--写
							lcd_e<='1';
						elsif delay_cnt<=4 then
							lcd_data<=data2(char_cnt);
						elsif delay_cnt<=6 then
							lcd_e<='0';--下降沿产生
						elsif delay_cnt>=100 then--等待>40us时间,使数据写入完毕
							delay_cnt:=0;
							lcd_state<=Display2;
							char_cnt:=char_cnt+1;
						end if;
					else
						delay_cnt:=0;
						lcd_state<=over;
						char_cnt:=0;
					end if;
				when over=>				
					null;
			end case;
		end if;
	end if;
	--delay_cnt_tst<=delay_cnt;
	end process;				
end behave;